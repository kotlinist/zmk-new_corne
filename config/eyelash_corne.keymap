#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&soft_off { hold-time-ms = <2000>; };

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        minusTD: minusTD {
            compatible = "zmk,behavior-tap-dance";
            label = "MINUSTD";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp UNDER>;
        };

        hmShiftR: hmShiftR {
            compatible = "zmk,behavior-hold-tap";
            label = "HMSHIFTR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 34 42 43 44>;
            hold-trigger-on-release;
            flavor = "tap-preferred";
        };

        hmShiftL: hmShiftL {
            compatible = "zmk,behavior-hold-tap";
            label = "HMSHIFTL";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 8 10 11 12 22 23 24 25 26 27 36 37 38 39 40 41 46 47 9 45>;
            flavor = "tap-preferred";
        };

        hmR: hmR {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 34 42 43 44>;
            hold-trigger-on-release;
            flavor = "tap-preferred";
        };

        hmL: hmL {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 8 10 11 12 22 23 24 25 26 27 36 37 38 39 40 41 46 47 9 45>;
            flavor = "tap-preferred";
        };

        longPress: longPress {
            compatible = "zmk,behavior-hold-tap";
            label = "LONGPRESS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <350>;
            flavor = "tap-preferred";
        };

        dotTD: dotTD {
            compatible = "zmk,behavior-tap-dance";
            label = "DOTTD";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp LS(SEMI)>;
        };

        commaTD: commaTD {
            compatible = "zmk,behavior-tap-dance";
            label = "COMMATD";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
        };

        graveTD: graveTD {
            compatible = "zmk,behavior-tap-dance";
            label = "GRAVETD";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>, <&kp LS(GRAVE)>;
        };

        quoteTD: quoteTD {
            compatible = "zmk,behavior-tap-dance";
            label = "QUOTETD";
            #binding-cells = <0>;
            bindings = <&kp APOS>, <&kp LS(APOS)>;
        };

        backslashTD: backslashTD {
            compatible = "zmk,behavior-tap-dance";
            label = "BACKSLASHTD";
            #binding-cells = <0>;
            bindings = <&kp BACKSLASH>, <&kp LS(BACKSLASH)>;
        };

        slashTD: slashTD {
            compatible = "zmk,behavior-tap-dance";
            label = "SLASHTD";
            #binding-cells = <0>;
            bindings = <&kp SLASH>, <&kp LS(SLASH)>;
        };

        equalTD: equalTD {
            compatible = "zmk,behavior-tap-dance";
            label = "EQUALTD";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>, <&kp PLUS>;
        };

        langTD: langTD {
            compatible = "zmk,behavior-tap-dance";
            label = "LANGTD";
            #binding-cells = <0>;
            bindings = <&switchLang>, <&doubleShift>, <&kp CAPS>;

            tapping-term-ms = <300>;
        };

        colonTD: colonTD {
            compatible = "zmk,behavior-tap-dance";
            label = "COLONTD";
            #binding-cells = <0>;
            bindings = <&kp SEMI>, <&kp LS(SEMICOLON)>;
        };

        hmRb: hmRb {
            compatible = "zmk,behavior-hold-tap";
            label = "HMRB";
            bindings = <&kp>, <&colonTD>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 34 42 43 44>;
            hold-trigger-on-release;
            flavor = "tap-preferred";
        };

        sendDot: sendDot {
            compatible = "zmk,behavior-send-string";
            label = "SENDDOT";
            #binding-cells = <0>;
            text = ".";
        };

        sendComma: sendComma {
            compatible = "zmk,behavior-send-string";
            label = "SENDCOMMA";
            #binding-cells = <0>;
            text = ",";
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        softoff {
            bindings = <&soft_off>;
            key-positions = <1 15 29>;
        };
    };

    macros {
        switchLang: switchLang {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_CONTROL>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LEFT_CONTROL>;

            label = "SWITCHLANG";
            wait-ms = <10>;
            tap-ms = <10>;
        };

        doubleShift: doubleShift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LEFT_SHIFT &kp LEFT_SHIFT>;

            label = "DOUBLESHIFT";
            wait-ms = <20>;
            tap-ms = <20>;
        };

        comma_macro: comma {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA>;
            label = "COMMA";
        };

        dot_macro: dot_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT>;
            label = "DOT_MACRO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp ESC          &kp Q                &kp W                   &kp E               &kp R                &kp T                                             &kp LS(LA(LC(LG(UP))))                               &kp Y          &kp U                &kp I            &kp O                   &kp P                 &kp BACKSLASH
&kp LEFT_BRACE   &hmL LEFT_CONTROL A  &hmShiftL LEFT_SHIFT S  &hmL LEFT_ALT D     &hmL LEFT_COMMAND F  &kp G                   &kp LS(LA(LC(LG(LEFT))))  &none                     &kp LS(LA(LG(LC(RIGHT))))  &kp H          &hmR LEFT_COMMAND J  &hmR LEFT_ALT K  &hmShiftR LEFT_SHIFT L  &hmRb LEFT_CONTROL 0  &kp APOS
&kp RIGHT_BRACE  &kp Z                &longPress LG(X) X      &longPress LG(C) C  &longPress LG(V) V   &kp B      &kp SPACE                              &kp LS(LA(LC(LG(DOWN))))                             &kp N          &kp M                &kp COMMA        &kp DOT                 &kp SLASH             &kp GRAVE
                                                              &langTD             &mo 1                &kp SPACE                                                                                              &kp BACKSPACE  &mo 2                &lt 3 RET
            >;

            sensor-bindings = <&inc_dec_kp RIGHT_BRACKET LEFT_BRACKET>;
        };

        layer_number {
            display-name = "NUMBER";
            bindings = <
&trans  &kp LS(N1)                  &kp LS(N2)                     &kp LS(NUMBER_3)        &kp LS(N4)                  &kp LS(N5)                                   &mmv MOVE_Y(200)                     &kp LS(N6)    &kp LS(N7)            &kp LS(N8)        &kp LS(N9)               &kp LS(N0)            &trans
&trans  &hmL LEFT_CONTROL NUMBER_1  &hmShiftL LEFT_SHIFT NUMBER_2  &hmL LEFT_ALT NUMBER_3  &hmL LEFT_COMMAND NUMBER_4  &kp N5                    &mmv MOVE_X(-200)  &mkp LCLK          &mmv MOVE_X(200)  &kp NUMBER_6  &hmR LEFT_COMMAND N7  &hmR LEFT_ALT N8  &hmShiftR LEFT_SHIFT N9  &hmR LEFT_CONTROL N0  &trans
&trans  &trans                      &trans                         &trans                  &trans                      &trans      &kp C_MUTE                       &mmv MOVE_Y(-200)                    &trans        &trans                &trans            &trans                   &trans                &trans
                                                                   &trans                  &trans                      &trans                                                                            &kp DEL       &none                 &kp TAB
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_symbol {
            display-name = "SYMBOL";
            bindings = <
&trans  &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)  &kp LS(NUMBER_5)                            &mmv MOVE_UP                     &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR   &kp RPAR  &none
&trans  &kp LEFT_CONTROL  &kp LEFT_SHIFT    &kp LEFT_ALT      &kp LEFT_COMMAND  &kp CAPSLOCK                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &kp HOME  &kp PAGE_UP
&trans  &out OUT_USB      &out OUT_BLE      &trans            &trans            &trans            &trans                    &mmv MOVE_DOWN                   &kp MINUS  &kp EQUAL  &kp COMMA  &kp DOT    &kp END   &kp PAGE_DOWN
                                            &trans            &trans            &kp SPACE                                                                    &kp RET    &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_fn {
            display-name = "Fn";
            bindings = <
&studio_unlock     &kp F1           &kp F2           &kp F3           &kp F4           &kp F5                                         &msc SCRL_UP                     &kp F6        &kp F7        &kp F8        &kp F9      &kp F10      &kp F11
&ext_power EP_TOG  &rgb_ug RGB_BRI  &rgb_ug RGB_SPD  &rgb_ug RGB_SPI  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI                &msc SCRL_LEFT  &bt BT_CLR_ALL  &msc SCRL_RIGHT  &bt BT_SEL 0  &mkp LCLK     &mkp MCLK     &mkp RCLK   &bl BL_INC   &kp F12
&rgb_ug RGB_TOG    &rgb_ug RGB_BRD  &rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &rgb_ug RGB_HUD  &rgb_ug RGB_HUI  &kp C_MUTE                    &msc SCRL_DOWN                   &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &sys_reset  &bootloader  &none
                                                     &trans           &trans           &trans                                                                          &trans        &trans        &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};
